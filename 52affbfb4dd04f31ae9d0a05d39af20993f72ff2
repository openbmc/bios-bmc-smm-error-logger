{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d0732bc9_4bf54ec3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-06-16T19:33:51Z",
      "side": 1,
      "message": "Is there HW test that will for sure know that it works?",
      "revId": "52affbfb4dd04f31ae9d0a05d39af20993f72ff2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed3fa217_57815e40",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-06-16T21:56:46Z",
      "side": 1,
      "message": "Yep, I\u0027m trying to get a machine with the new / special BIOS + this change to try this test out - but it might make more sense for that to come after the next change (which brings all of these together)",
      "parentUuid": "d0732bc9_4bf54ec3",
      "revId": "52affbfb4dd04f31ae9d0a05d39af20993f72ff2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed69f4ea_e3ec2b03",
        "filename": "src/buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1001138
      },
      "writtenOn": "2022-06-16T23:20:02Z",
      "side": 1,
      "message": "do we need to check whether the relativeOffset \u003c queueSize too?",
      "range": {
        "startLine": 128,
        "startChar": 63,
        "endLine": 128,
        "endChar": 77
      },
      "revId": "52affbfb4dd04f31ae9d0a05d39af20993f72ff2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9243de85_b47cd2f1",
        "filename": "src/buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-06-17T03:02:12Z",
      "side": 1,
      "message": "That is inherently checked by the lower level data interface (out of bound read) so I decided not to test it again - I could add it though",
      "parentUuid": "ed69f4ea_e3ec2b03",
      "range": {
        "startLine": 128,
        "startChar": 63,
        "endLine": 128,
        "endChar": 77
      },
      "revId": "52affbfb4dd04f31ae9d0a05d39af20993f72ff2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "214fe737_514d7c1d",
        "filename": "src/buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-06-17T05:09:25Z",
      "side": 1,
      "message": "Thinking about this a bit more, I think this is a good idea - let me add this check and add a test case as well.",
      "parentUuid": "9243de85_b47cd2f1",
      "range": {
        "startLine": 128,
        "startChar": 63,
        "endLine": 128,
        "endChar": 77
      },
      "revId": "52affbfb4dd04f31ae9d0a05d39af20993f72ff2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "642ba10f_4adf2d70",
        "filename": "src/buffer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 198,
      "author": {
        "id": 1001138
      },
      "writtenOn": "2022-06-16T23:20:02Z",
      "side": 1,
      "message": "you have fixed this! I left a suggestion in the CL that this was added. Basically my suggestion is to limit this conversion inside read/write functions dedicated to each struct if possible and use native endianness everywhere else. Otherwise has to remember to do this every time.",
      "range": {
        "startLine": 198,
        "startChar": 38,
        "endLine": 198,
        "endChar": 54
      },
      "revId": "52affbfb4dd04f31ae9d0a05d39af20993f72ff2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}